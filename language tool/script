<# .DESCRIPTION Dyslexia Writing Assistant - Helps with spelling corrections and sentence completion. #> # Function to calculate Levenshtein distance for spelling suggestions function Get-LevenshteinDistance { param([string]$a, [string]$b) $lenA = $a.Length $lenB = $b.Length $d = New-Object 'int[,]' ($lenA + 1), ($lenB + 1) for ($i = 0; $i -le $lenA; $i++) { $d[$i, 0] = $i } for ($j = 0; $j -le $lenB; $j++) { $d[0, $j] = $j } for ($i = 1; $i -le $lenA; $i++) { for ($j = 1; $j -le $lenB; $j++) { $cost = if ($a[$i-1] -eq $b[$j-1]) { 0 } else { 1 } $d[$i, $j] = [Math]::Min( [Math]::Min( $d[$i-1, $j] + 1, $d[$i, $j-1] + 1 ), $d[$i-1, $j-1] + $cost ) } } return $d[$lenA, $lenB] } # Load dictionary (replace with your dictionary path) $dictionaryPath = "$env:USERPROFILE\words_alpha.txt" if (-not (Test-Path $dictionaryPath)) { Write-Host "Dictionary not found! Please download a word list and update the path." -ForegroundColor Red exit } $dictionary = Get-Content $dictionaryPath | ForEach-Object { $_.Trim().ToLower() } # Word prediction database (customize with common phrases) $wordPredictions = @{ "the" = @("quick", "best", "most", "next") "quick" = @("brown", "fox", "action") "brown" = @("fox", "dog", "cat") "hello" = @("world", "there", "friend") "thank" = @("you", "very", "so") "i" = @("am", "have", "need") "good" = @("morning", "afternoon", "night") } # Main program $sentence = @() Write-Host "`nDyslexia Writing Assistant" -ForegroundColor Cyan Write-Host "Type words one at a time (press Enter to finish)`n" while ($true) { $word = Read-Host "Enter a word" if ([string]::IsNullOrWhiteSpace($word)) { break } # Spelling check $originalWord = $word $wordLower = $word.ToLower() if (-not ($dictionary -contains $wordLower)) { Write-Host "Checking spelling..." -ForegroundColor Yellow # Get spelling suggestions $suggestions = $dictionary | ForEach-Object { [PSCustomObject]@{ Word = $_ Distance = Get-LevenshteinDistance $wordLower $_ } } | Sort-Object Distance | Select-Object -First 5 -ExpandProperty Word if ($suggestions) { Write-Host "Suggestions:" -ForegroundColor Yellow for ($i = 0; $i -lt $suggestions.Count; $i++) { Write-Host "$($i+1). $($suggestions[$i])" } $choice = Read-Host "Select correction (1-5) or press Enter to keep original" if ($choice -match '^[1-5]$') { $word = $suggestions[$choice-1] Write-Host "Using: $word" -ForegroundColor Green } } } # Add word to sentence $sentence += $word # Word prediction if ($wordPredictions.ContainsKey($word.ToLower())) { $predictions = $wordPredictions[$word.ToLower()] Write-Host "Next word suggestions:" -ForegroundColor Yellow for ($i = 0; $i -lt $predictions.Count; $i++) { Write-Host "$($i+1). $($predictions[$i])" } $choice = Read-Host "Select prediction (1-$($predictions.Count)) or press Enter to skip" if ($choice -match "^[1-$($predictions.Count)]$") { $sentence += $predictions[$choice-1] Write-Host "Added: $($predictions[$choice-1])" -ForegroundColor Green } } } # Display final sentence Write-Host "`nYour completed sentence:`n" -ForegroundColor Cyan Write-Host ($sentence -join " ") -ForegroundColor Green
